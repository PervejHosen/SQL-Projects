drop database tourism;
CREATE OR replace DATABASE TOURISM;
USE DATABASE TOURISM;
CREATE OR replace SCHEMA EUROPE;
USE SCHEMA EUROPE;
CREATE OR replace TABLE AIRBNB(
    City varchar (10),
    Price NUMBER (10,7),
    DayType varchar(10),
    Room_Type varchar (15),
    Shared_Room BOOLEAN,
    Private_Room BOOLEAN,
    Person_Capacity NUMBER(10),
    Superhost BOOLEAN,
    Multiple_Rooms NUMBER (5),
    Business NUMBER(5),
    Cleanliness_Rating NUMBER (10),
    Guest_Satisfaction NUMBER (5),
    Bedrooms NUMBER (10),
    City_Center NUMBER (10,6),
    Metro_Distance NUMBER (10,6),
    Attraction_Index NUMBER (10,6),
    Normalised_Attraction_Index NUMBER (10,6),
    Restraunt_Index NUMBER (10,6),
    Normalised_Restraunt_Index NUMBER (10,6)
    );

select * from airbnb limit 5;
select count(*) from airbnb;---41238 obserbation

--Lets see do we have any MISSING VALUE AS NULL

SELECT * FROM AIRBNB 
WHERE 
    CITY AND PRICE AND DAYTYPE AND ROOM_TYPE AND SHARED_ROOM AND PRIVATE_ROOM AND PERSON_CAPACITY AND SUPERHOST AND MULTIPLE_ROOMS AND                    BUSINESS AND CLEANLINESS_RATING AND GUEST_SATISFACTION AND BEDROOMS AND CITY_CENTER AND METRO_DISTANCE AND ATTRACTION_INDEX AND                       NORMALISED_ATTRACTION_INDEX AND RESTRAUNT_INDEX AND NORMALISED_RESTRAUNT_INDEX  IS NULL
LIMIT 5; --NO MISSIING VALUE AS NULL

--Lets see do we have any MISSING VALUE AS BLANK
SELECT * FROM AIRBNB
WHERE 
    CITY AND PRICE AND DAYTYPE AND ROOM_TYPE AND SHARED_ROOM AND PRIVATE_ROOM AND PERSON_CAPACITY AND SUPERHOST AND MULTIPLE_ROOMS AND                    BUSINESS AND CLEANLINESS_RATING AND GUEST_SATISFACTION AND BEDROOMS AND CITY_CENTER AND METRO_DISTANCE AND ATTRACTION_INDEX AND                       NORMALISED_ATTRACTION_INDEX AND RESTRAUNT_INDEX AND NORMALISED_RESTRAUNT_INDEX = ''
LIMIT 5; --NO MISSING VCALUE AS BLANK


-------------Descriptive Analysis and Frequency Distribution----------

--Lets see Uniqe category of some variables/features.

SELECT DISTINCT CITY
FROM AIRBNB; ---Amsterdam,Athens,Barcelona,Berlin,Budapest,Lisbon,Paris,Vienna,Rome

SELECT DISTINCT ROOM_TYPE
FROM AIRBNB; --Private room,Entire home/apt,Shared room

SELECT DISTINCT person_capacity
FROM AIRBNB; ---2,3,4,5,6

SELECT DISTINCT cleanliness_rating
FROM AIRBNB; ---2 to 10

SELECT DISTINCT guest_satisfaction
FROM AIRBNB; --20 to 100 scale. 51 uniqe category

SELECT DISTINCT bedrooms
FROM AIRBNB; --0,1,2,3,4,5,9,10

--Lets see Some Summary static of variables/features

WITH CTE AS(
(SELECT
  'PRICE' Metrix,
  ROUND(MIN(PRICE),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PRICE) "Q1",
  ROUND(MEDIAN(PRICE),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PRICE) "Q3",
  ROUND(MAX(PRICE),0) MAX,
  ROUND(AVG(PRICE),0) AVG,
  ROUND(MODE(PRICE),0) MODE,
  ROUND(STDDEV(PRICE),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'PERSON_CAPACITY' Metrix,
  ROUND(MIN(PERSON_CAPACITY),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY PERSON_CAPACITY) "Q1",
  ROUND(MEDIAN(PRICE),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY PERSON_CAPACITY) "Q3",
  ROUND(MAX(PERSON_CAPACITY),0) MAX,
  ROUND(AVG(PERSON_CAPACITY),0) AVG,
  ROUND(MODE(PERSON_CAPACITY),0) MODE,
  ROUND(STDDEV(PERSON_CAPACITY),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'CLEANLINESS_RATING' Metrix,
  ROUND(MIN(CLEANLINESS_RATING),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY CLEANLINESS_RATING) "Q1",
  ROUND(MEDIAN(CLEANLINESS_RATING),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY CLEANLINESS_RATING) "Q3",
  ROUND(MAX(CLEANLINESS_RATING),0) MAX,
  ROUND(AVG(CLEANLINESS_RATING),0) AVG,
  ROUND(MODE(CLEANLINESS_RATING),0) MODE,
  ROUND(STDDEV(CLEANLINESS_RATING),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'GUEST_SATISFACTION' Metrix,
  ROUND(MIN(GUEST_SATISFACTION),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY GUEST_SATISFACTION) "Q1",
  ROUND(MEDIAN(GUEST_SATISFACTION),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY GUEST_SATISFACTION) "Q3",
  ROUND(MAX(GUEST_SATISFACTION),0) MAX,
  ROUND(AVG(GUEST_SATISFACTION),0) AVG,
  ROUND(MODE(GUEST_SATISFACTION),0) MODE,
  ROUND(STDDEV(GUEST_SATISFACTION),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'BEDROOMS' Metrix,
  ROUND(MIN(BEDROOMS),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY BEDROOMS) "Q1",
  ROUND(MEDIAN(BEDROOMS),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY BEDROOMS) "Q3",
  ROUND(MAX(BEDROOMS),0) MAX,
  ROUND(AVG(BEDROOMS),0) AVG,
  ROUND(MODE(BEDROOMS),0) MODE,
  ROUND(STDDEV(BEDROOMS),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'CITY_CENTER' Metrix,
  ROUND(MIN(CITY_CENTER),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY CITY_CENTER) "Q1",
  ROUND(MEDIAN(CITY_CENTER),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY CITY_CENTER) "Q3",
  ROUND(MAX(CITY_CENTER),0) MAX,
  ROUND(AVG(CITY_CENTER),0) AVG,
  ROUND(MODE(CITY_CENTER),0) MODE,
  ROUND(STDDEV(CITY_CENTER),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'METRO_DISTANCE' Metrix,
  ROUND(MIN(METRO_DISTANCE),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY METRO_DISTANCE) "Q1",
  ROUND(MEDIAN(METRO_DISTANCE),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY METRO_DISTANCE) "Q3",
  ROUND(MAX(METRO_DISTANCE),0) MAX,
  ROUND(AVG(METRO_DISTANCE),0) AVG,
  ROUND(MODE(METRO_DISTANCE),0) MODE,
  ROUND(STDDEV(METRO_DISTANCE),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'ATTRACTION_INDEX' Metrix,
  ROUND(MIN(ATTRACTION_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY ATTRACTION_INDEX) "Q1",
  ROUND(MEDIAN(ATTRACTION_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY ATTRACTION_INDEX) "Q3",
  ROUND(MAX(ATTRACTION_INDEX),0) MAX,
  ROUND(AVG(ATTRACTION_INDEX),0) AVG,
  ROUND(MODE(ATTRACTION_INDEX),0) MODE,
  ROUND(STDDEV(ATTRACTION_INDEX),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'NORMALISED_ATTRACTION_INDEX' Metrix,
  ROUND(MIN(NORMALISED_ATTRACTION_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY NORMALISED_ATTRACTION_INDEX) "Q1",
  ROUND(MEDIAN(NORMALISED_ATTRACTION_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY NORMALISED_ATTRACTION_INDEX) "Q3",
  ROUND(MAX(NORMALISED_ATTRACTION_INDEX),0) MAX,
  ROUND(AVG(NORMALISED_ATTRACTION_INDEX),0) AVG,
  ROUND(MODE(NORMALISED_ATTRACTION_INDEX),0) MODE,
  ROUND(STDDEV(NORMALISED_ATTRACTION_INDEX),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'RESTRAUNT_INDEX' Metrix,
  ROUND(MIN(RESTRAUNT_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY RESTRAUNT_INDEX) "Q1",
  ROUND(MEDIAN(RESTRAUNT_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY RESTRAUNT_INDEX) "Q3",
  ROUND(MAX(RESTRAUNT_INDEX),0) MAX,
  ROUND(AVG(RESTRAUNT_INDEX),0) AVG,
  ROUND(MODE(RESTRAUNT_INDEX),0) MODE,
  ROUND(STDDEV(RESTRAUNT_INDEX),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
UNION ALL 
(SELECT
  'NORMALISED_RESTRAUNT_INDEX' Metrix,
  ROUND(MIN(NORMALISED_RESTRAUNT_INDEX),0) MIN,
  PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY NORMALISED_RESTRAUNT_INDEX) "Q1",
  ROUND(MEDIAN(NORMALISED_RESTRAUNT_INDEX),0) MEDIAN,
  PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY NORMALISED_RESTRAUNT_INDEX) "Q3",
  ROUND(MAX(NORMALISED_RESTRAUNT_INDEX),0) MAX,
  ROUND(AVG(NORMALISED_RESTRAUNT_INDEX),0) AVG,
  ROUND(MODE(NORMALISED_RESTRAUNT_INDEX),0) MODE,
  ROUND(STDDEV(NORMALISED_RESTRAUNT_INDEX),2) STD_DEV
FROM airbnb
GROUP BY Metrix)
)
SELECT * FROM CTE;


-------------FREQUENCY Distribution------------------

--Guest_Satisfaction
SELECT guest_satisfaction, count(guest_satisfaction) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC; --most of the obserbation are between 80 to 100

--PERSON_CAPACITY
SELECT person_capacity, count(person_capacity) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;

--PRICE
SELECT price, count(price) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;

--CLEANLINESS_RATING
SELECT cleanliness_rating, count(cleanliness_rating) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;

--BEDROOMS
SELECT bedrooms, count(bedrooms) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;

--CITY_CENTER
SELECT city_center, count(city_center) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;

 --METRO_DISTANCE
SELECT metro_distance, count(metro_distance) AS Frequency
FROM airbnb
GROUP BY 1
ORDER BY 2 DESC;

-------------------------------------------------------------------------

--lets see city wise total observations

select city,
    count(city) as total_observation
from airbnb
group by 1
order by 2 DESC; --ROME HAS THE HIGHEST OBSERBATION(9004), AMSTERDAM HAS LEAST (1875)

--Lets see city wise min,max,avg of price

select city,
round(min(price),0) as minimum_house_price, --35
round(max(price),0) as maximum_house_price, --999
round(avg(price),0) as avrrage_house_price  --243
from airbnb
group by 1
order by 2 desc;

---FIVE NUMBER SUMMARY AND INTER-QUARTILE RANGES (IQR)

WITH FIVE_NUMBER_SUMMARY AS
(SELECT 
min(price) AS MIN_price,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY price) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price) AS Q3,
max(price) AS MAX_ORDER_VALUE,
(PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price)-PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price)) AS IQR
FROM airbnb)

SELECT (Q1-1.5*IQR) AS LOWER_HINGE, (Q3+1.5*IQR) AS UPPER_HINGE
FROM FIVE_NUMBER_SUMMARY AS F; --UPPER HINGE: 513.70055

----FINDING OUTLIERS

WITH FIVE_NUMBER_SUMMARY AS
(SELECT 
MIN(price) AS MIN_price,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY price) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price) AS Q3,
MAX(price) AS MAX_price,
(PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price)-PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price)) AS IQR
FROM airbnb),
HINGES AS
(SELECT (Q1-1.5*IQR) AS LOWER_HINGE, (Q3+1.5*IQR) AS UPPER_HINGE
FROM FIVE_NUMBER_SUMMARY AS F)

SELECT price FROM airbnb
WHERE price > (SELECT UPPER_HINGE FROM HINGES); --- there is 2.6k row of upper hinge outliers exist

---Normaly Distribute of data by removing outliers

WITH FIVE_NUMBER_SUMMARY AS
(SELECT 
MIN(price) AS MIN_price,
PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price) AS Q1,
PERCENTILE_CONT(0.50) WITHIN GROUP (ORDER BY price) AS MEDIAN,
PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price) AS Q3,
MAX(price) AS MAX_price,
(PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY price)-PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY price)) AS IQR
FROM airbnb),
HINGES AS
(SELECT (Q1-1.5*IQR) AS LOWER_HINGE, (Q3+1.5*IQR) AS UPPER_HINGE
FROM FIVE_NUMBER_SUMMARY AS F)
SELECT price FROM airbnb
WHERE price > (SELECT LOWER_HINGE FROM HINGES) AND price < (SELECT UPPER_HINGE FROM HINGES);

---Finding Correlation of Guest Satisfiction with other variables

WITH CTE AS
(
(SELECT 'PRICE' Feature_1, 'GUEST_SATISFACTION' Feature_2, CORR(PRICE,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL(
SELECT 'PERSON_CAPACITY' Feature_1, 'GUEST_SATISFACTION' Feature_2, CORR(PERSON_CAPACITY,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL(
SELECT 'CLEANLINESS_RATING' Feature_1, 'GUEST_SATISFACTION' Feature_2, CORR(CLEANLINESS_RATING,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL(
SELECT 'BEDROOMS' Feature_1, 'GUEST_SATISFACTION' Feature_2, CORR(BEDROOMS,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL(
SELECT 'CITY_CENTER' Feature_1, 'GUEST_SATISFACTION' Feature_2, CORR(CITY_CENTER,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL
(SELECT 'METRO_DISTANCE' Feature_1, 'GUEST_SATISFACTION' Feature_2, CORR(METRO_DISTANCE,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL
(SELECT 'ATTRACTION_INDEX' Feature_1, 'GUEST_SATISFACTION' Feature_2, CORR(ATTRACTION_INDEX,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL
(SELECT 'NORMALISED_ATTRACTION_INDEX' Feature_1, 'GUEST_SATISFACTION' Feature_2, CORR(NORMALISED_ATTRACTION_INDEX,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL
(SELECT 'RESTRAUNT_INDEX' Feature_1, 'GUEST_SATISFACTION' Feature_2, CORR(RESTRAUNT_INDEX,GUEST_SATISFACTION) CORR
FROM AIRBNB) 
UNION ALL
(SELECT 'NORMALISED_RESTRAUNT_INDEX'Feature_1, 'GUEST_SATISFACTION' Feature_2, CORR(NORMALISED_RESTRAUNT_INDEX,GUEST_SATISFACTION) CORR
FROM AIRBNB))
SELECT * FROM CTE; --highest correlations are between Cleanliness_rating and  Guest_Satisfaction (0.6921501012)
